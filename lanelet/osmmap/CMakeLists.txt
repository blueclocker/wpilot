cmake_minimum_required(VERSION 3.0.2)
project(osmmap)

## Compile as C++11, supported in ROS Kinetic and newer
 add_compile_options(-std=c++14)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  rospy
  std_msgs
  tf
  message_generation
  fsd_common_msgs
  geometry_msgs
  pcl_ros
  visualization_msgs
  #cv_bridge
)

find_package(Eigen3 REQUIRED)
find_package(gflags REQUIRED)
find_package(OsqpEigen REQUIRED)
#find_package(OpenCV REQUIRED)
#find_package(PCL REQUIRED)
#find_package(OpenMP QUIET)
#if (OpenMP_FOUND)
#  add_compile_options("${OpenMP_CXX_FLAGS}")
#  add_definitions(-DGRID_MAP_PCL_OPENMP_FOUND=${OpenMP_FOUND})
#endif()

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a exec_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
 add_message_files(
   FILES
#   Message1.msg
#   Message2.msg
    Lane.msg
    Lanes.msg
    Navigation.msg
    Regulatoryelement.msg
    CarState.msg
 )

## Generate services in the 'srv' folder
 add_service_files(
   FILES
   GetTargetPoint.srv
   GetNeighborLanelet.srv
   GetSameDirectionLanelet.srv
#   Service1.srv
#   Service2.srv
 )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
 generate_messages(
   DEPENDENCIES
   std_msgs
   geometry_msgs
   visualization_msgs
 )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES osmmap
  CATKIN_DEPENDS roscpp rospy std_msgs tf message_runtime
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
  include
  ${catkin_INCLUDE_DIRS}
  ${EIGEN3_INCLUDE_DIR}
  #${OpenCV_INCLUDE_DIRS}
  #${PCL_INCLUDE_DIRS}
  #${OpenMP_CXX_INCLUDE_DIRS}
)

## Declare a C++ library
# add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/osmmap.cpp
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
# add_executable(${PROJECT_NAME}_node src/osmmap_node.cpp)

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
# target_link_libraries(${PROJECT_NAME}_node
#   ${catkin_LIBRARIES}
# )

add_library(xmlio_lib
    src/tinyxml/tinystr.cpp
    src/tinyxml/tinyxml.cpp
    src/tinyxml/tinyxmlerror.cpp
    src/tinyxml/tinyxmlparser.cpp
)

add_library(map_lib
    src/hdmap/map_io.cpp 
    src/hdmap/map_node.cpp 
    src/hdmap/map_way.cpp 
    src/hdmap/map_relation.cpp 
    src/hdmap/centerway.cpp
    src/hdmap/visualization.cpp
    src/plan/astar_plan.cpp
    src/plan/lattice_plan.cpp
    src/plan/lattice_trajectory.cpp
    src/tools/dubins.cpp
    src/tools/reeds_shepp.cpp
    src/tools/polynomial_cubic_curve1d.cpp
    src/tools/polynomial_quartic_curve1d.cpp
    src/tools/polynomial_quintic_curve1d.cpp
    src/tools/cubic_path.cpp
    src/hastar/rs_path.cpp
    src/hastar/hybidacore.cpp
    src/smoother/reference_path_smoother.cpp
    src/smoother/planning_gflags.cc
    src/smoother/piecewise_jerk_problem.cc
    src/smoother/piecewise_jerk_path_problem.cc
    src/smoother/fem_pos_deviation_osqp.cpp
    #src/smoother/piecewise_jerk_speed_problem.cc
    src/smoother/smoother.cpp
    src/navagation/navagation.cpp
    src/navagation/navagation_gnss.cpp
    src/navagation/navagation_pcd.cpp
    src/navagation/navagation_sim.cpp
    src/navagation/navagation_pure.cpp
    src/navagation/navagation_optimizer.cpp
)
target_link_libraries(map_lib glog gflags xmlio_lib ${catkin_LIBRARIES} OsqpEigen::OsqpEigen )#${OpenCV_LIBS})

add_library(geographicLib
    src/GeographicLib/Geocentric.cpp
    src/GeographicLib/LocalCartesian.cpp
    src/GeographicLib/Math.cpp
)

add_executable(navagation_node src/astar_main.cpp)
target_link_libraries(navagation_node map_lib geographicLib)
add_dependencies(navagation_node ${PROJECT_NAME}_gencpp fsd_common_msgs_gencpp)

add_executable(lattice_node src/lattice_main.cpp)
target_link_libraries(lattice_node map_lib geographicLib)
#add_dependencies(lattice_node ${PROJECT_NAME}_gencpp)

#add_executable(math_test src/tools/math_test.cpp src/test/math.cpp)
#target_link_libraries(math_test ${catkin_LIBRARIES})

#add_executable(cubic_path_test src/test/cubic_path_test.cpp src/tools/cubic_path.cpp)
#target_link_libraries(cubic_path_test ${catkin_LIBRARIES} glog gflags)

#add_executable(fem_pos_test src/test/fem_pos_deviation_osqp_test.cpp src/smoother/fem_pos_deviation_osqp.cpp src/tools/cubic_path.cpp)
#target_link_libraries(fem_pos_test ${catkin_LIBRARIES} glog gflags OsqpEigen::OsqpEigen)

#add_executable(test_findtargetpoint src/test/test_findtargetpoint.cpp)
#target_link_libraries(test_findtargetpoint map_lib geographicLib)

#add_executable(test_getneighborlanelet src/test/test_getneighborlanelet.cpp)
#target_link_libraries(test_getneighborlanelet map_lib geographicLib)

#add_executable(test_getsamedirectionlanelet src/test/test_getsamedirectionlanelet.cpp)
#target_link_libraries(test_getsamedirectionlanelet map_lib geographicLib)

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# catkin_install_python(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html
# install(TARGETS ${PROJECT_NAME}_node
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark libraries for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html
# install(TARGETS ${PROJECT_NAME}
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_osmmap.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
